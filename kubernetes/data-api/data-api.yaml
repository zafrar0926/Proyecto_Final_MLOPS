apiVersion: v1
kind: Service
metadata:
  name: data-api
  namespace: mlops
spec:
  selector:
    app: data-api
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-api
  namespace: mlops
spec:
  replicas: 1
  selector:
    matchLabels:
      app: data-api
  template:
    metadata:
      labels:
        app: data-api
    spec:
      containers:
      - name: data-api
        image: python:3.8-slim
        command:
        - /bin/bash
        - -c
        - |
          pip install fastapi uvicorn pandas requests
          cat > /app.py << 'EOF'
          from fastapi import FastAPI, Query, HTTPException
          import requests
          from typing import Any, Dict, List
          import logging
          import json
          import pandas as pd
          from io import StringIO

          # Configure logging
          logging.basicConfig(level=logging.INFO)
          logger = logging.getLogger(__name__)

          app = FastAPI()

          PROFESSOR_API = "http://10.43.101.108:80"

          def parse_real_estate_data(text: str) -> List[Dict[str, Any]]:
              """Parse the text response into a list of real estate records."""
              try:
                  # Clean up the response text
                  text = text.strip()
                  if not text:
                      return []

                  # Try to parse as CSV first
                  try:
                      df = pd.read_csv(StringIO(text))
                      return df.to_dict('records')
                  except Exception as e:
                      logger.warning(f"Failed to parse as CSV: {str(e)}")

                  # Try to parse as JSON
                  try:
                      return json.loads(text)
                  except Exception as e:
                      logger.warning(f"Failed to parse as JSON: {str(e)}")

                  # If both fail, try to parse line by line
                  records = []
                  for line in text.split('\n'):
                      if not line.strip():
                          continue
                      try:
                          record = json.loads(line)
                          records.append(record)
                      except:
                          # If line is not JSON, try to parse it as a comma-separated record
                          try:
                              fields = line.split(',')
                              if len(fields) >= 10:  # Assuming we need at least 10 fields for a valid record
                                  record = {
                                      'price': float(fields[0]) if fields[0] else None,
                                      'bed': float(fields[1]) if fields[1] else None,
                                      'bath': float(fields[2]) if fields[2] else None,
                                      'acre_lot': float(fields[3]) if fields[3] else None,
                                      'street': fields[4],
                                      'city': fields[5],
                                      'state': fields[6],
                                      'zip_code': fields[7],
                                      'house_size': float(fields[8]) if fields[8] else None,
                                      'prev_sold_date': fields[9].strip('"') if fields[9] else None
                                  }
                                  records.append(record)
                          except Exception as e:
                              logger.warning(f"Failed to parse line: {line[:100]}... Error: {str(e)}")
                              continue

                  return records
              except Exception as e:
                  logger.error(f"Error parsing data: {str(e)}")
                  raise HTTPException(
                      status_code=500,
                      detail=f"Error parsing response data: {str(e)}"
                  )

          @app.get("/data")
          async def get_data(
              group_number: int = Query(..., description="Número del grupo"),
              day: str = Query(..., description="Día de la semana")
          ) -> List[Dict[str, Any]]:
              try:
                  # Log the incoming request
                  logger.info(f"Received request for group {group_number} on {day}")
                  
                  # Forward the request to the professor's API
                  response = requests.get(
                      f"{PROFESSOR_API}/data",
                      params={"group_number": group_number, "day": day}
                  )
                  
                  # Log the response status
                  logger.info(f"Professor API response status: {response.status_code}")
                  
                  if response.status_code == 200:
                      # Parse and format the response
                      data = parse_real_estate_data(response.text)
                      logger.info(f"Successfully parsed {len(data)} records")
                      return data
                  else:
                      logger.error(f"Error from professor API: {response.text}")
                      raise HTTPException(
                          status_code=response.status_code,
                          detail=f"Error from data source: {response.text}"
                      )
                      
              except requests.RequestException as e:
                  logger.error(f"Request error: {str(e)}")
                  raise HTTPException(
                      status_code=503,
                      detail=f"Error connecting to data source: {str(e)}"
                  )
              except Exception as e:
                  logger.error(f"Unexpected error: {str(e)}")
                  raise HTTPException(
                      status_code=500,
                      detail=f"Internal server error: {str(e)}"
                  )

          if __name__ == "__main__":
              import uvicorn
              uvicorn.run(app, host="0.0.0.0", port=8000)
          EOF
          python /app.py
        ports:
        - containerPort: 8000 